---
- name: Get the current RHEL release
  ansible.builtin.setup:
    gather_subset: distribution_version

- name: Ensure that the system is running a RHEL release which is supported for SAP HANA
  ansible.builtin.assert:
    that: minor_release in "{{ sap_hana_preconfigure_supported_rhel_minor_releases }}"
    fail_msg: "The RHEL release {{ minor_release }} is not supported for SAP HANA!"
    success_msg: "The RHEL release {{ minor_release }} is supported for SAP HANA."
  ignore_errors: "{{ not sap_hana_preconfigure_min_rhel_release_check }}"
  vars:
    minor_release: "{{ ansible_facts['distribution_minor_version'] }}"

- name: Perform steps for enabling repos for SAP HANA
  ansible.builtin.yum_repository:
    name: "{{ item }}"
    enabled: true
  loop: >
    "{{
    __sap_hana_preconfigure_req_repos
    [ansible_facts['architecture']]
    [ansible_facts['distribution_version']]
    |
    default(__sap_hana_preconfigure_req_repos
    [ansible_facts['architecture']]
    [ansible_facts['distribution_major_version']])
    }}"


- name: Detect if the minor RHEL release is set
  ansible.builtin.shell: set -o pipefail && subscription-manager release --show | awk '{print $NF}'
  register: __sap_hana_preconfigure_register_subscription_manager_release
  changed_when: false
  when:
    - sap_hana_preconfigure_set_minor_release

- name: Set the minor RHEL release
  ansible.builtin.command: subscription-manager release --set="{{ ansible_distribution_version }}"
  when:
    - sap_hana_preconfigure_set_minor_release
    - __sap_hana_preconfigure_register_subscription_manager_release.stdout != ansible_distribution_version

- name: Ensure required packages are installed
  ansible.builtin.package:
    state: present
    name: "{{ item }}"
  loop: >
    "{{
    sap_hana_preconfigure_packages[ansible_facts['distribution_version']]
    }}"

# TODO remove this task
# no need, packages are updated later to latest version, just install packages do not care about minimal version
- name: Ensure that the minimum required package versions are installed
  when:
    - sap_hana_preconfigure_min_package_check | bool
    - __sap_hana_preconfigure_min_pkgs | d([])
  block:
    - name: Install minimum packages if required
      ansible.builtin.package:
        name: "{{ package.name }}>={{ package.version }}"
        state: present
      loop: >
        "{{
        __sap_hana_preconfigure_min_packages
        [ansible_facts['architecture']]
        [ansible_facts['distribution_version']]
        }}"
      loop_control:
        loop_var: package


# Reason for noqa: Both yum and dnf support "state: latest"
- name: Ensure that the system is updated to the latest patchlevel # noqa package-latest
  ansible.builtin.package:
    state: latest
    name: "*"
  when: sap_hana_preconfigure_update | bool

- name: Need restarting?
  ansible.builtin.include_tasks:
    name: needrestart.yml

- name: Install packages for sap notes
  ansible.builtin.include_tasks:
    name: note_package_install.yml
  loop: >
    "{{
    __sap_hana_preconfigure_sapnotes_versions
    [ansible_facts['architecture']]
    [ansible_facts['distribution_major_version']]
    }}"
  loop_control:
    loop_var: "note"